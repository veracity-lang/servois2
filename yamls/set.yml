name: set

preamble: |
  (declare-sort E 0)

state:
  - name: S
    type: (Set E)
  - name: size
    type: Int

states_equal:
  definition: (and (= S_1 S_2) (= size_1 size_2))

methods:
  - name: add
    args:
      - name: v
        type: E
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (ite (set.member v S)
           (and (= S_new S)
                (= size_new size)
                (not result))
           (and (= S_new (set.union S (set.singleton v)))
                (= size_new (+ size 1))
                result))
    terms:
      E: [$1]
      Int: [size, 1, (+ size 1)]
      (Set E): [S, (set.singleton $1), (set.union S (set.singleton $1))]
  - name: remove
    args:
      - name: v
        type: E
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (ite (set.member v S)
           (and (= S_new (set.minus S (set.singleton v)))
                (= size_new (- size 1))
                result)
           (and (= S_new S)
                (= size_new size)
                (not result)))
    terms:
      E: [$1]
      Int: [size, 1, (- size 1)]
      (Set E): [S, (set.singleton $1), (set.minus S (set.singleton $1))]
  - name: contains
    args:
      - name: v
        type: E
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (and (= S_new S)
           (= size_new size)
           (= (set.member v S) result))
    terms:
      E: [$1]
      Int: [size]
      (Set E): [S, (set.singleton $1), (set.minus S (set.singleton $1))]
  - name: getsize
    args: []
    return:
      - name: result
        type: Int
    requires: |
      true
    ensures: |
      (and (= S_new S)
           (= size_new size)
           (= size result))
    terms:
      Int: [size]

predicates:
  - name: "="
    type: [Int, Int]
  - name: "="
    type: [E, E]
  - name: "="
    type: [(Set E), (Set E)]
  - name: "set.member"
    type: [E, (Set E)]
