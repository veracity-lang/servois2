# Hash table data structure's abstract definition

name: Dihedral

precondition:
  (and (= x0 0) (= x1 1) (= x2 2) (= x3 3) (= x4 4) (= x5 5))

preamble: |
  (define-fun-rec r0 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x0 (r0 (- n 1) x1 x2 x3 x4 x5 x0)))
  (define-fun-rec r1 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x1 (r1 (- n 1) x1 x2 x3 x4 x5 x0)))
  (define-fun-rec r2 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x2 (r2 (- n 1) x1 x2 x3 x4 x5 x0)))
  (define-fun-rec r3 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x3 (r3 (- n 1) x1 x2 x3 x4 x5 x0)))
  (define-fun-rec r4 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x4 (r4 (- n 1) x1 x2 x3 x4 x5 x0)))
  (define-fun-rec r5 ((n Int) (x0 Int) (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) Int (ite (= n 0) x5 (r5 (- n 1) x1 x2 x3 x4 x5 x0)))

state:
  - name: x0
    type: Int
  - name: x1
    type: Int
  - name: x2
    type: Int
  - name: x3
    type: Int
  - name: x4
    type: Int
  - name: x5
    type: Int

states_equal:
  definition: |
    (and (= x0_1 x0_2)
         (= x1_1 x1_2)
         (= x2_1 x2_2)
         (= x3_1 x3_2)
         (= x4_1 x4_2)
         (= x5_1 x5_2)
    )

methods:
  - name: rotate
    args:
      - name: rn
        type: Int
    return:
      - name: result
        type: Bool
    requires: |
      (and (<= 0 rn) (< rn 6))
    ensures: |
      (and (= result true)
           (= x0_new (r0 rn x0 x1 x2 x3 x4 x5))
           (= x1_new (r1 rn x0 x1 x2 x3 x4 x5))
           (= x2_new (r2 rn x0 x1 x2 x3 x4 x5))
           (= x3_new (r3 rn x0 x1 x2 x3 x4 x5))
           (= x4_new (r4 rn x0 x1 x2 x3 x4 x5))
           (= x5_new (r5 rn x0 x1 x2 x3 x4 x5))
       )
    terms:
      Int: [rn, 0, 1, 2, 3]

predicates:
  - name: "="
    type: [Int, Int]

