# Hash table data structure's abstract definition

name: HashTable

preamble: |
  (declare-sort E 0)
  (declare-sort F 0)
  (declare-fun beta_pre () (Array E Bool))
  (declare-fun beta_post () (Array E Bool))
  (define-fun beta_coherence ((beta (Array E Bool)) (H_l (Array E F)) (H_r (Array E F))) Bool 
    (forall ((e E))
        (=> 
            (not (select beta e))
            (= (select H_l e) (select H_r e))
        )
    )
  )

state:
  - name: keys
    type: (Array E Bool)
  - name: H
    type: (Array E F)
  - name: size
    type: Int
  - name: get_param
    type: E
  - name: get_result
    type: F

states_equal:
  definition: |
    (and 
        (beta_coherence beta_post H_1 H_2)
        (= keys_1 keys_2)
        (= H_1 H_2)
        (= size_1 size_2)
        (= get_param_1 get_param_2)
        (= get_result_1 get_result_2)
    )

methods:
  - name: put
    args:
      - name: k0
        type: E
      - name: v0
        type: F
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (ite (select keys k0)
           (and (= keys_new keys)
                (= size_new size)
                (ite (= v0 (select H k0))
                     (and (not result)
                          (= H_new H))
                     (and result
                          (= H_new (store H k0 v0)))))
           (and (= keys_new (store keys k0 true))
                (= size_new (+ size 1))
                result
                (= H_new (store H k0 v0))))
    terms:
      Int: [size, 1, (+ size 1)]
      E: [$1]
      F: [$2, (select H $1), ]
      (Array E Bool): [keys, (store keys $1 true)]
      (Array E F): [H, (store H $1 $2)]
  - name: get
    args: []
    return: []
    requires: |
      (select keys get_param)
    ensures: |
      (and (= keys_new keys)
        (= H_new H)
        (= size_new size)
        (= (select H get_param) get_result_new)
        (= get_param_new get_param)
      )
    terms:
      Int: [size]
      E: [get_param]
      F: [(select H get_param)]
      (Array E Bool): [keys]
      (Array E F): [H]
  - name: haskey
    args:
      - name: k0
        type: E
    return:
      - name: result
        type: Bool
    requires: |
      true
    ensures: |
      (and (= keys_new keys)
           (= H_new H)
           (= size_new size)
           (= (select keys k0) result)
       )
    terms:
      Int: [size]
      E: [$1]
      (Array E Bool): [keys]
      (Array E F): [H]
#  - name: remove
#    args:
#      - name: v
#        type: E
#    return:
#      - name: result
#        type: Bool
#    requires: |
#      true
#    ensures: |
#      (ite (select keys v)
#           (and (= keys_new (setminus keys (singleton v)))
#                (= size_new (- size 1))
#                (= H_new H)
#                result)
#           (and (= keys_new keys)
#                (= size_new size)
#                (= H_new H)
#                (not result)))
#    terms:
#      Int: [size, 1, (- size 1)]
#      E: [$1]
#      (Set E): [keys, (singleton $1), (setminus keys (singleton $1))]
#      (Array E F): [H]
  - name: size
    args: []
    return:
      - name: result
        type: Int
    requires: |
      true
    ensures: |
      (and (= keys_new keys)
           (= H_new H)
           (= size_new size)
           (= size result))
    terms:
      Int: [size]
      (Array E Bool): [keys]
      (Array E F): [H]

predicates:
  - name: "="
    type: [Int, Int]
  - name: "="
    type: [E, E]
  - name: "="
    type: [F, F]
  - name: "="
    type: [Bool, Bool]
  - name: "="
    type: [(Array E Bool), (Array E Bool)]
  - name: "="
    type: [(Array E F), (Array E F)]
  - name: "select"
    type: [(Array E Bool), E]

